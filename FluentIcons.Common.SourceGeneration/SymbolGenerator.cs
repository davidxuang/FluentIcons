using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace FluentIcons.Common.SourceGeneration;

[Generator]
public sealed class SymbolGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var declarations = context.SyntaxProvider
            .CreateSyntaxProvider(
                (node, _) => node is EnumDeclarationSyntax declaration && declaration.Identifier.Text == "Icon",
                (ctx, _) => (EnumDeclarationSyntax)ctx.Node)
            .Collect();

        context.RegisterSourceOutput(declarations.Combine(context.CompilationProvider), (spc, source) =>
        {
            var (enums, compilation) = source;
            foreach (var declaration in enums)
            {
                var model = compilation.GetSemanticModel(declaration.SyntaxTree);
                if (model.GetDeclaredSymbol(declaration) is not INamedTypeSymbol symbol)
                    continue;

                var ns = symbol.ContainingNamespace.ToDisplayString();
                var name = symbol.Name;
                var members = symbol.GetMembers().OfType<IFieldSymbol>()
                    .Where(f => f.HasConstantValue && !f.GetAttributes().Any(a => a.AttributeClass?.Name == "NonResizableAttribute"));

                var code = new StringBuilder();
                code.AppendLine("// <auto-generated/>");
                code.AppendLine($"namespace {ns}");
                code.AppendLine("{");
                code.AppendLine($"    public enum Symbol : int");
                code.AppendLine("    {");
                foreach (var member in members)
                {
                    code.AppendLine($"        {member.Name} = (int)Icon.{member.Name},");
                }
                code.AppendLine("    }");
                code.AppendLine("}");
                spc.AddSource($"Symbol.g.cs", SourceText.From(code.ToString(), Encoding.UTF8));
            }
        });
    }
}
